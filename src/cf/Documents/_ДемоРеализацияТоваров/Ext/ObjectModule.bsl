///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ДанныеЗаполнения = Неопределено Тогда // Ввод нового.
		_ДемоСтандартныеПодсистемы.ПриВводеНовогоЗаполнитьОрганизацию(ЭтотОбъект, "ГоловнаяОрганизация");
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка._ДемоПоступлениеТоваров") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, , "Номер,Дата,Ответственный,Комментарий");
		ГоловнаяОрганизация = ДанныеЗаполнения.Организация;
		Ответственный = Пользователи.ТекущийПользователь();
		Для Каждого СтрокаТовары Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
			НоваяСтрока.ДокументПоступления = ДанныеЗаполнения;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	СформироватьДвиженияПоМестамХранения();
	
	СформироватьБухгалтерскиеДвижения();
	
	СформироватьДвиженияВРеестрДокументов();
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	Префикс = "А";
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТовары Из Товары Цикл
	
		Если Не ЗначениеЗаполнено(СтрокаТовары.КлючАналитики) Тогда
			ПараметрыКлюча = Новый Структура("Номенклатура, МестоХранения", СтрокаТовары.Номенклатура, МестоХранения);
			СтрокаТовары.КлючАналитики = Справочники._ДемоКлючиАналитикиНоменклатуры.СоздатьКлюч(ПараметрыКлюча);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
//

Процедура СформироватьДвиженияПоМестамХранения()
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрБухгалтерии._ДемоОсновной");    
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;                              
	ЭлементБлокировки.УстановитьЗначение("Организация", ГоловнаяОрганизация);
	БлокировкаДанных.Заблокировать();
	
	Массив = Новый Массив;
	Для Сч = 1 По 1000000 Цикл          
		Массив.Добавить(ГоловнаяОрганизация);
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрБухгалтерии._ДемоОсновной");    
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;                              
		ЭлементБлокировки.УстановитьЗначение("Организация", ГоловнаяОрганизация);
	КонецЦикла;
	БлокировкаДанных.Заблокировать();                               
	
	КонтрольОстатков();
	
	Движения._ДемоОстаткиТоваровВМестахХранения.Записывать = Истина;
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		Движение = Движения._ДемоОстаткиТоваровВМестахХранения.Добавить();
		
		Движение.Период        = Дата;
		Движение.ВидДвижения   = ВидДвиженияНакопления.Расход;
		
		Движение.Организация   = ГоловнаяОрганизация;
		Движение.МестоХранения = МестоХранения;
		
		Движение.Номенклатура  = СтрокаТовары.Номенклатура;
		Движение.Количество    = СтрокаТовары.Количество;
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура КонтрольОстатков()
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления._ДемоОстаткиТоваровВМестахХранения");    
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;                              
	ЭлементБлокировки.УстановитьЗначение("Организация", ГоловнаяОрганизация);
	ЭлементБлокировки.УстановитьЗначение("МестоХранения", МестоХранения);
	ЭлементБлокировки.ИсточникДанных = Товары;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	БлокировкаДанных.Заблокировать();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВложенныйЗапрос.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	                      |	ВложенныйЗапрос.МестоХранения КАК МестоХранения,
	                      |	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	                      |	ВложенныйЗапрос.Количество КАК Количество,
	                      |	ЕСТЬNULL(_ДемоОстаткиТоваровВМестахХраненияОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток
	                      |ИЗ
	                      |	(ВЫБРАТЬ
	                      |		_ДемоРеализацияТоваровТовары.Номенклатура КАК Номенклатура,
	                      |		_ДемоРеализацияТоваровТовары.Ссылка.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	                      |		СУММА(_ДемоРеализацияТоваровТовары.Количество) КАК Количество,
	                      |		_ДемоРеализацияТоваровТовары.Ссылка.МестоХранения КАК МестоХранения,
	                      |		_ДемоРеализацияТоваровТовары.Номенклатура.ПометкаУдаления КАК НоменклатураПометкаУдаления,
	                      |		_ДемоРеализацияТоваровТовары.Номенклатура.Наименование КАК НоменклатураНаименование,
	                      |		_ДемоРеализацияТоваровТовары.Номенклатура.ВидНоменклатуры КАК НоменклатураВидНоменклатуры,
	                      |		_ДемоРеализацияТоваровТовары.КлючАналитики.Номенклатура.Родитель КАК КлючАналитикиНоменклатураРодитель,
	                      |		_ДемоРеализацияТоваровТовары.КлючАналитики.Номенклатура.Родитель КАК КлючАналитикиНоменклатураРодитель1,
	                      |		_ДемоРеализацияТоваровТовары.КлючАналитики.Номенклатура.ВидНоменклатуры КАК КлючАналитикиНоменклатураВидНоменклатуры,
	                      |		_ДемоРеализацияТоваровТовары.КлючАналитики.Номенклатура.ГруппаДоступа КАК КлючАналитикиНоменклатураГруппаДоступа,
	                      |		_ДемоРеализацияТоваровТовары.КлючАналитики.Номенклатура.СтранаПроисхождения КАК КлючАналитикиНоменклатураСтранаПроисхождения,
	                      |		_ДемоРеализацияТоваровТовары.КлючАналитики.МестоХранения.Родитель КАК КлючАналитикиМестоХраненияРодитель,
	                      |		_ДемоРеализацияТоваровТовары.КлючАналитики.МестоХранения.МОЛ КАК КлючАналитикиМестоХраненияМОЛ,
	                      |		_ДемоРеализацияТоваровТовары.КлючАналитики.МестоХранения.Поставщик КАК КлючАналитикиМестоХраненияПоставщик,
	                      |		_ДемоРеализацияТоваровТовары.КлючАналитики.МестоХранения.ГруппаДоступа КАК КлючАналитикиМестоХраненияГруппаДоступа,
	                      |		_ДемоРеализацияТоваровТовары.КлючАналитики.МестоХранения.ВидПартнера КАК КлючАналитикиМестоХраненияВидПартнера,
	                      |		_ДемоРеализацияТоваровТовары.Номенклатура.СтранаПроисхождения КАК НоменклатураСтранаПроисхождения,
	                      |		_ДемоРеализацияТоваровТовары.Номенклатура.СтранаПроисхождения.Наименование КАК НоменклатураСтранаПроисхожденияНаименование,
	                      |		_ДемоРеализацияТоваровТовары.Ссылка.Договор.Партнер.ВидПартнера КАК ДоговорПартнерВидПартнера,
	                      |		_ДемоРеализацияТоваровТовары.Ссылка.Договор.ВалютаРасчетов.НаименованиеПолное КАК ДоговорВалютаРасчетовНаименованиеПолное
	                      |	ИЗ
	                      |		Документ._ДемоРеализацияТоваров.Товары КАК _ДемоРеализацияТоваровТовары
	                      |	ГДЕ
	                      |		_ДемоРеализацияТоваровТовары.Ссылка = &Ссылка
	                      |	
	                      |	СГРУППИРОВАТЬ ПО
	                      |		_ДемоРеализацияТоваровТовары.Номенклатура,
	                      |		_ДемоРеализацияТоваровТовары.Ссылка.ГоловнаяОрганизация,
	                      |		_ДемоРеализацияТоваровТовары.Ссылка.МестоХранения,
	                      |		_ДемоРеализацияТоваровТовары.Номенклатура.ПометкаУдаления,
	                      |		_ДемоРеализацияТоваровТовары.Номенклатура.Наименование,
	                      |		_ДемоРеализацияТоваровТовары.Номенклатура.ВидНоменклатуры,
	                      |		_ДемоРеализацияТоваровТовары.КлючАналитики.Номенклатура.Родитель,
	                      |		_ДемоРеализацияТоваровТовары.КлючАналитики.Номенклатура.ВидНоменклатуры,
	                      |		_ДемоРеализацияТоваровТовары.КлючАналитики.Номенклатура.ГруппаДоступа,
	                      |		_ДемоРеализацияТоваровТовары.КлючАналитики.Номенклатура.СтранаПроисхождения,
	                      |		_ДемоРеализацияТоваровТовары.КлючАналитики.МестоХранения.Родитель,
	                      |		_ДемоРеализацияТоваровТовары.КлючАналитики.МестоХранения.МОЛ,
	                      |		_ДемоРеализацияТоваровТовары.КлючАналитики.МестоХранения.Поставщик,
	                      |		_ДемоРеализацияТоваровТовары.КлючАналитики.МестоХранения.ГруппаДоступа,
	                      |		_ДемоРеализацияТоваровТовары.КлючАналитики.МестоХранения.ВидПартнера,
	                      |		_ДемоРеализацияТоваровТовары.Ссылка.Договор.Партнер.ВидПартнера,
	                      |		_ДемоРеализацияТоваровТовары.Ссылка.Договор.ВалютаРасчетов.НаименованиеПолное,
	                      |		_ДемоРеализацияТоваровТовары.Номенклатура.СтранаПроисхождения,
	                      |		_ДемоРеализацияТоваровТовары.Номенклатура.СтранаПроисхождения.Наименование,
	                      |		_ДемоРеализацияТоваровТовары.КлючАналитики.Номенклатура.Родитель) КАК ВложенныйЗапрос
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления._ДемоОстаткиТоваровВМестахХранения.Остатки(&Дата, ) КАК _ДемоОстаткиТоваровВМестахХраненияОстатки
	                      |		ПО ВложенныйЗапрос.Номенклатура = _ДемоОстаткиТоваровВМестахХраненияОстатки.Номенклатура");   
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл                          
		ОстатокПосле = Выборка.КоличествоОстаток - Выборка.Количество;
		Если ОстатокПосле < 0 Тогда                                                                                                                                              
			Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	_ДемоОборотыПоСчетамНаОплатуОбороты.Номенклатура КАК Номенклатура,
		                      |	_ДемоОборотыПоСчетамНаОплатуОбороты.СуммаОборот КАК СуммаОборот
		                      |ИЗ
		                      |	РегистрНакопления._ДемоОборотыПоСчетамНаОплату.Обороты КАК _ДемоОборотыПоСчетамНаОплатуОбороты
		                      |ГДЕ
		                      |	_ДемоОборотыПоСчетамНаОплатуОбороты.Номенклатура = &Номенклатура");
			Запрос.УстановитьПараметр("Номенклатура", Выборка.Номенклатура);
			ВыборкаОборот = Запрос.Выполнить().Выбрать();
			Сумма = 0;
			Если ВыборкаОборот.Следующий() Тогда
				Сумма = ВыборкаОборот.СуммаОборот;
			КонецЕсли; 
			Сообщить("Недостаточно товара " + Выборка.Номенклатура + " на складе " + Выборка.МестоХранения + " организации " + Выборка.ГоловнаяОрганизация + ": " + ОстатокПосле + " на сумму " + Сумма);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//
Процедура СформироватьДвиженияВРеестрДокументов()
	
	УстановитьПривилегированныйРежим(Истина);

	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка));
	Движение = РегистрыСведений._ДемоРеестрДокументов.СоздатьМенеджерЗаписи();
	Движение.ТипСсылки = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоРеквизиту("Имя",(МетаданныеОбъекта.Имя));
	Движение.Организация = ГоловнаяОрганизация;
	Движение.Партнер = Партнер;
	Движение.МестоХранения = МестоХранения;
	Движение.Контрагент = Контрагент;
	Движение.Подразделение = Подразделение;
	Движение.ДатаДокументаИБ = Дата;
	Движение.Договор = Договор;
	Движение.Ссылка = Ссылка;
	Движение.НомерДокументаИБ = Номер;
	Движение.Ответственный = Ответственный;
	Движение.Комментарий = Комментарий;
	Движение.Проведен = Истина;
	Движение.ПометкаУдаления = Ложь;
	Движение.Дополнительно = НСтр("ru = 'По договору'")+" " + """"+Договор+"""";
	Движение.ДатаПервичногоДокумента = Дата;
	Движение.НомерПервичногоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер, Истина, Истина) ;
	Движение.Сумма = Товары.Итог("Цена")*Товары.Итог("Количество");
	Движение.Валюта = Валюта;
	Движение.ДатаОтраженияВУчете = Дата;
	Движение.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура СформироватьБухгалтерскиеДвижения()
	
	ВалютныйДокумент = Валюта.Код <> "643";
	Если Валюта.Пустая() Тогда
		ВалютаДокумента  = Новый Структура("Курс, Кратность", 1, 1,);
	Иначе
		ВалютаДокумента  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Дата);
	КонецЕсли;
	
	ОбрабатыватьНДС = ПолучитьФункциональнуюОпцию("_ДемоУчитыватьНДС") И Не ВалютныйДокумент;
	
	Движения._ДемоОсновной.Записывать = Истина;
	
	Для Каждого СтрокаТовара Из Товары Цикл
		
		ДвижениеРеализацииТовара(СтрокаТовара, ВалютныйДокумент, ВалютаДокумента);
		
		Если ОбрабатыватьНДС Тогда
			ДвижениеУчетаНачисленногоНДС(СтрокаТовара);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвижениеРеализацииТовара(Знач СтрокаТовара, Знач ВалютныйУчет, Знач ВалютаДокумента)
		
	ВалютнаяСумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
	РублеваяСумма = ВалютнаяСумма * ВалютаДокумента.Курс / ВалютаДокумента.Кратность;
	
	НоменклатурнаяГруппа = СтрокаТовара.Номенклатура.ВидНоменклатуры;
	
	// ---
	Движение = Движения._ДемоОсновной.Добавить();
	Движение.Период      = Дата;
	Движение.Организация = ГоловнаяОрганизация;
	Движение.Содержание  = НСтр("ru = 'Реализация товаров'");
	Движение.Сумма       = РублеваяСумма;
	
	Если ВалютныйУчет Тогда
		Движение.СчетДт          = ПланыСчетов._ДемоОсновной.РасчетыСПокупателямиВал;
		Движение.ВалютаДт        = Валюта;
		Движение.ВалютнаяСуммаДт = ВалютнаяСумма;
	Иначе
		Движение.СчетДт = ПланыСчетов._ДемоОсновной.РасчетыСПокупателями;
	КонецЕсли;
	
	Движение.СубконтоДт.Контрагенты = Контрагент;
	Движение.СубконтоДт.Договоры    = Договор;
	
	Движение.СчетКт = ПланыСчетов._ДемоОсновной.Выручка;
	Движение.СубконтоКт.НоменклатурныеГруппы = НоменклатурнаяГруппа;
	
	Если Не ВалютныйУчет Тогда
		Движение.СубконтоКт.СтавкиНДС = СтавкаНДС;
	КонецЕсли;
	
	// ---
	Движение = Движения._ДемоОсновной.Добавить();
	Движение.Период      = Дата;
	Движение.Организация = ГоловнаяОрганизация;
	Движение.Содержание  = НСтр("ru = 'Реализация товаров'");
	Движение.Сумма       = РублеваяСумма;
	
	Движение.СчетДт = ПланыСчетов._ДемоОсновной.СебестоимостьПродаж;
	Движение.СубконтоДт.НоменклатурныеГруппы = НоменклатурнаяГруппа;
	
	Движение.СчетКт = ПланыСчетов._ДемоОсновной.ТоварыНаСкладах;
	
	Движение.СубконтоКт.Контрагенты  = Контрагент;
	Движение.СубконтоКт.Номенклатура = СтрокаТовара.Номенклатура;
	Движение.СубконтоКт.Склады       = МестоХранения;
	
	Движение.КоличествоКт = СтрокаТовара.Количество;
	
КонецПроцедуры

Процедура ДвижениеУчетаНачисленногоНДС(Знач СтрокаТовара)
	
	РублеваяСумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
	СуммаНДС = РублеваяСумма / 100 * СтавкаНДС.Ставка;
	
	НоменклатурнаяГруппа = СтрокаТовара.Номенклатура.ВидНоменклатуры;	
	
	Движение = Движения._ДемоОсновной.Добавить();
	Движение.Период      = Дата;
	Движение.Организация = ГоловнаяОрганизация;
	Движение.Сумма       = СуммаНДС;
	
	Движение.СчетДт = ПланыСчетов._ДемоОсновной.Продажи_НДС;
	Движение.СубконтоДт.НоменклатурныеГруппы = НоменклатурнаяГруппа;
	
	Движение.СчетКт = ПланыСчетов._ДемоОсновной.НДС;
	Движение.СубконтоКт.ВидыПлатежейВБюджет = Перечисления._ДемоВидыПлатежейВБюджет.Налог;
	
	Значения = Новый Структура;
	Значения.Вставить("Содержание", "ru = 'Реализация товаров';"); // @НСтр-2
	
	ОбщегоНазначения.УстановитьЗначенияРеквизитов(Движение, Значения);
	
КонецПроцедуры


#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли